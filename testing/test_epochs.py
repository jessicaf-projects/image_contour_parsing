import sys
sys.path.insert(0,'../')

from epochs import create_epoch
import unittest
import numpy as np

class TestStringMethods(unittest.TestCase):
    """
    Unit tests for generating epochs and batches for a CNN.

    Additional unit tests include:
    - Check that a synthetically generated image containing a
      rectangular box image gives the expected pixel area when
      matching with a contour.
    """
    def test_randomization(self):
        """
        Check if the shuffling/randomization is valid with each new epoch
        by comparing the shuffled data in the new dataframe with the existing
        ones.
        :return:
        """
        epoch = create_epoch('../final_data')
        shuffled_df1 = epoch.get_shuffled_df()

        epoch.new_epoch()
        shuffled_df2 = epoch.get_shuffled_df()

        self.assertFalse(shuffled_df1.equals(shuffled_df2))

    def test_randomization_images_and_targets(self):
        """
        Verify that the numpy arrays generated by randomization are not the same
        :return:
        """

        epoch = create_epoch('../final_data')

        epoch1_images = []
        epoch1_targets = []
        images, targets = epoch.get_current_batch()
        while images is not None:
            epoch1_images.append(images)
            epoch1_targets.append(targets)
            images, targets = epoch.get_current_batch()


        epoch.new_epoch()
        epoch2_images = []
        epoch2_targets = []
        images, targets = epoch.get_current_batch()
        while images is not None:
            epoch2_images.append(images)
            epoch2_targets.append(targets)
            images, targets = epoch.get_current_batch()

        for batch_idx in range(len(epoch1_targets)):
            self.assertFalse(np.array_equal(epoch1_images[batch_idx],epoch2_images[batch_idx]))
            self.assertFalse(np.array_equal(epoch1_targets[batch_idx], epoch2_targets[batch_idx]))


if __name__ == '__main__':
    unittest.main()